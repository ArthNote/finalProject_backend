// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @unique @default(cuid())
  name            String
  email           String?
  emailVerified   Boolean?
  image           String?
  createdAt       DateTime
  updatedAt       DateTime
  username        String?
  displayUsername String?
  lang            String
  sessions        Session[]
  accounts        Account[]

  twoFactorEnabled Boolean?
  twofactors       TwoFactor[]

  stripeCustomerId String?

  // New relation for task assignments
  assignedTasks          TaskAssignment[]
  Task                   Task[]
  sentFriendRequests     Friendship[]      @relation("SentFriendRequests")
  receivedFriendRequests Friendship[]      @relation("ReceivedFriendRequests")
  chats                  ChatParticipant[]
  messages               Message[]

  @@unique([email])
  @@unique([username])
  @@map("user")
}

model Session {
  id        String   @id @unique @default(cuid())
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @unique @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @unique @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model TwoFactor {
  id          String @id @unique @default(cuid())
  secret      String
  backupCodes String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}

model Subscription {
  id                   String    @id @unique @default(cuid())
  plan                 String
  referenceId          String
  stripeCustomerId     String?
  stripeSubscriptionId String?
  status               String?
  periodStart          DateTime?
  periodEnd            DateTime?
  cancelAtPeriodEnd    Boolean?
  seats                Int?
  trialStart           DateTime?
  trialEnd             DateTime?
  billing              String?
  price                Float?
  autoRenew            Boolean?  @default(true)

  @@map("subscription")
}

model Task {
  id String @id @unique @default(cuid())

  title       String
  description String
  priority    String // "high", "medium", "low"
  category    String
  completed   Boolean   @default(false)
  scheduled   Boolean   @default(false)
  date        DateTime?
  startTime   DateTime?
  endTime     DateTime?
  duration    Int? // Duration in minutes
  tags        String[]
  status      String? // For kanban view
  order       Int? // For kanban sorting
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  userId   String?
  user     User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  parentId String? // For sub-tasks
  parent   Task?   @relation("SubTasks", fields: [parentId], references: [id], onDelete: SetNull)
  subTasks Task[]  @relation("SubTasks")

  resources TaskResource[]

  // Task assignments
  assignedTo TaskAssignment[]

  @@map("task")
}

model TaskResource {
  id       String  @id @unique @default(cuid())
  name     String
  type     String
  category String // "file", "link", "note"
  url      String?

  // Relation to Task
  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("task_resource")
}

model TaskAssignment {
  id        String   @id @unique @default(cuid())
  taskId    String
  userId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([taskId, userId])
  @@map("task_assignment")
}

model Friendship {
  id        String   @id @unique @default(cuid())
  status    String // "pending", "accepted", "blocked"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  senderId   String
  receiverId String
  sender     User   @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User   @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@map("friendship")
}
model Chat {
  id           String            @id @unique @default(cuid())
  name         String?
  type         String // "individual" or "group"
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  messages     Message[]
  participants ChatParticipant[]

  @@map("chat")
}

model ChatParticipant {
  id       String   @id @unique @default(cuid())
  userId   String
  chatId   String
  role     String   @default("member") // "admin" or "member"
  joinedAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat     Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId])
  @@map("chat_participant")
}

model Message {
  id        String   @id @unique @default(cuid())
  content   String
  type      String   @default("text") // "text", "file", "image"
  fileUrl   String?
  fileName  String?
  fileSize  Int?
  senderId  String
  chatId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String   @default("sent") // "sent", "delivered", "read"
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("message")
}
